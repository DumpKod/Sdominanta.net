from fastapi import FastAPI, WebSocket, HTTPException
from fastapi.responses import JSONResponse
from typing import List, Dict
import yaml
import os
# –ú–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç SdominantaAgent –Ω–∞ –Ω–æ–≤—ã–π –ø—É—Ç—å
from pa2ap.agent import SdominantaAgent
import asyncio
import httpx
from pydantic import BaseModel
from pynostr.event import Event, EventKind
from bridge.api.wall import WallAPI # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WallAPI
from bridge.error_handler import safe_websocket_send, log_error_with_context, safe_p2p_operation
from bridge.cache_manager import (
    api_cache, wall_cache, task_manager, performance_monitor,
    cached_async, initialize_performance_system, shutdown_performance_system
)
from bridge.logger import (
    log_manager, log_api_request, log_p2p_event, log_performance_metric,
    log_error, setup_fastapi_logging
)
import json
import logging
import time

app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WallAPI
wall_api = WallAPI()

connected_websockets: set[WebSocket] = set() # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

async def handle_p2p_message(msg: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö P2P —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    global known_peers
    global connected_websockets

    logging.info(f"[SERVER AGENT RECEIVED]: {msg}")

    try:
        data = json.loads(msg)
        if data[0] == "EVENT":
            event_data = data[2]
            event_pubkey = event_data.get("pubkey")

            if event_pubkey and event_pubkey not in known_peers:
                known_peers.add(event_pubkey)
                log_p2p_event("peer_added", peer=event_pubkey, event_data={"old_count": len(known_peers) - 1})

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º P2P —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º WebSocket-–∫–ª–∏–µ–Ω—Ç–∞–º —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            disconnected_websockets = []
            for websocket in connected_websockets.copy():
                success = await safe_websocket_send(websocket, {"type": "p2p_event", "data": event_data})
                if not success:
                    disconnected_websockets.append(websocket)

            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for websocket in disconnected_websockets:
                if websocket in connected_websockets:
                    connected_websockets.remove(websocket)
                    logging.warning("Removed disconnected WebSocket from connected_websockets")

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
            log_p2p_event("event_processed", event_data={"event_type": "message", "recipients": len(connected_websockets)})

    except json.JSONDecodeError as e:
        log_error(e, "P2P message JSON parsing", {"message": msg})
    except Exception as e:
        log_error(e, "P2P message processing", {"message": msg})


# –£–¥–∞–ª—è–µ–º GemmaRequest, —Ç–∞–∫ –∫–∞–∫ Gemma —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
# class GemmaRequest(BaseModel):
#     prompt: str

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG = {}
config_path = os.getenv("BRIDGE_CONFIG_PATH", "Sdominanta.net/bridge/config.yaml")
try:
    with open(config_path, 'r') as f:
        CONFIG = yaml.safe_load(f)
except FileNotFoundError:
    print(f"Warning: Config file not found at {config_path}. Using default settings.")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è P2P
sdominanta_agent: SdominantaAgent = None
p2p_background_task = None
p2p_connection_status = "disconnected"  # disconnected, connecting, connected, error
p2p_connection_error = None

# –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Docker Secrets.
SERVER_AGENT_PRIVATE_KEY = os.getenv("SERVER_AGENT_PRIVATE_KEY", None)
known_peers: set[str] = set() # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–∏—Ä–æ–≤

async def init_p2p_agent():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ P2P –∞–≥–µ–Ω—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    global sdominanta_agent, p2p_connection_status, p2p_connection_error

    if not CONFIG.get('p2p_enabled', False):
        print("P2P service is disabled in configuration")
        return False

    try:
        p2p_connection_status = "connecting"
        daemon_url = os.getenv("P2P_WS_URL", "ws://127.0.0.1:9090")

        print(f"Initializing P2P agent with daemon URL: {daemon_url}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SdominantaAgent —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º —Å–µ—Ä–≤–µ—Ä–∞
        sdominanta_agent = SdominantaAgent(private_key=SERVER_AGENT_PRIVATE_KEY)
        print(f"Server Agent Public Key: {sdominanta_agent.public_key}")

        if not SERVER_AGENT_PRIVATE_KEY:
            print(f"!!! SAVE THIS SERVER PRIVATE KEY: {sdominanta_agent.private_key.hex()} !!!")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–∞–º–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∏—Ä–æ–≤
        known_peers.add(sdominanta_agent.public_key)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ P2P daemon —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry
        await safe_p2p_operation(sdominanta_agent.connect, ws_url=daemon_url)

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await sdominanta_agent.subscribe("sub_general", {"kinds": [EventKind.TEXT_NOTE]})
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ —ç—Ç–æ–º—É –∞–≥–µ–Ω—Ç—É
        await sdominanta_agent.subscribe("sub_dm", {"kinds": [EventKind.ENCRYPTED_DIRECT_MESSAGE], "#p": [sdominanta_agent.public_key]})

        p2p_connection_status = "connected"
        print("P2P agent successfully initialized and connected")
        return True

    except Exception as e:
        p2p_connection_status = "error"
        p2p_connection_error = str(e)
        print(f"Failed to initialize P2P agent: {e}")
        return False

async def start_p2p_listening():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è P2P —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ"""
    global p2p_background_task

    if sdominanta_agent and p2p_connection_status == "connected":
        try:
            p2p_background_task = asyncio.create_task(sdominanta_agent.listen(handle_p2p_message))
            print("P2P listening task started")
        except Exception as e:
            print(f"Failed to start P2P listening: {e}")
            p2p_connection_status = "error"
            p2p_connection_error = str(e)

async def stop_p2p_agent():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã P2P –∞–≥–µ–Ω—Ç–∞"""
    global sdominanta_agent, p2p_background_task, p2p_connection_status

    if p2p_background_task and not p2p_background_task.done():
        print("Cancelling P2P background task...")
        p2p_background_task.cancel()
        try:
            await p2p_background_task
        except asyncio.CancelledError:
            print("P2P background task cancelled")

        if sdominanta_agent:
            try:
                print("Closing P2P agent connection...")
                await sdominanta_agent.close()
                print("P2P agent connection closed")
            except Exception as e:
                print(f"Error closing P2P agent: {e}")

    p2p_connection_status = "disconnected"

# Lifespan event handler –¥–ª—è FastAPI (–∑–∞–º–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ on_event)
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    setup_fastapi_logging()
    logging.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã Sdominanta.net")

    await init_p2p_agent()
    await start_p2p_listening()
    await initialize_performance_system()

    logging.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    yield
    # Shutdown
    logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
    await stop_p2p_agent()
    await shutdown_performance_system()
    logging.info("üõë –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

# –û–±–Ω–æ–≤–ª—è–µ–º app –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è lifespan
app.router.lifespan_context = lifespan


@app.post("/api/v1/wall/publish")
async def wall_publish(note_signed: Dict): # note_signed —Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ Nostr –≤ —Å–ª–æ–≤–∞—Ä–µ
    """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –Ω–∞ —Å—Ç–µ–Ω—É —á–µ—Ä–µ–∑ P2P-—Å–µ—Ç—å."""
    if not sdominanta_agent:
        raise HTTPException(status_code=503, detail="P2P service not enabled or connected.")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread_id –∏–∑ tags, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º 'general'
    thread_id = "general"
    for tag in note_signed.get('tags', []):
        if tag[0] == 't':
            thread_id = tag[1]
            break

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º WallAPI –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–∫–∏
    return await wall_api.publish_note(
        author_id=sdominanta_agent.public_key, # –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∞–≥–µ–Ω—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∫ –∞–≤—Ç–æ—Ä
        thread_id=thread_id,
        content=note_signed, # –í—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç
        is_private=False, # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
        recipient_user_id=None
    )

# @app.post("/api/v1/gemma/ask") # –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ Gemma –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∞–≥–µ–Ω—Ç–∞
# async def gemma_ask(request: GemmaRequest):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemma –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ –æ—Ç–≤–µ—Ç."""
#     ollama_url = "http://ollama:11434/api/generate"
#     payload = {
#         "model": "gemma:2b", # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å gemma:2b –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
#         "prompt": request.prompt,
#         "stream": False  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Ü–µ–ª–∏–∫–æ–º, –∞ –Ω–µ –ø–æ —á–∞—Å—Ç—è–º
#     }

#     try:
#         async with httpx.AsyncClient(timeout=120.0) as client: # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–æ–ª–≥–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
#             response = await client.post(ollama_url, json=payload)
#             response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è HTTP-–æ—à–∏–±–æ–∫
            
#             # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
#             response_data = response.json()
#             return JSONResponse(status_code=200, content={"response": response_data.get("response", "")})

#     except httpx.RequestError as e:
#         raise HTTPException(status_code=503, detail=f"Service unavailable: Could not connect to Ollama server. {e}")
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=f"An unexpected error occurred: {e}")


@cached_async(wall_cache, ttl=60)
async def _get_wall_notes_cached(thread_id: str = "general", since: str = None, limit: int = 50):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ —Å—Ç–µ–Ω—ã"""
    return await wall_api.get_thread_notes(thread_id=thread_id, since=since, limit=limit)

@app.get("/api/v1/wall/threads")
async def wall_threads(thread_id: str = "general", since: str = None, limit: int = 50):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞ —Å—Ç–µ–Ω—ã."""
    start_time = time.time()
    try:
        result = await _get_wall_notes_cached(thread_id=thread_id, since=since, limit=limit)
        response_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        log_performance_metric('wall_threads_response_time', response_time, {
            'thread_id': thread_id,
            'cached': True
        })

        performance_monitor.record_metric('wall_threads_response_time', response_time)
        return result
    except Exception as e:
        response_time = (time.time() - start_time) * 1000
        log_performance_metric('wall_threads_error_time', response_time, {
            'thread_id': thread_id,
            'error': str(e)
        })
        performance_monitor.record_metric('wall_threads_error_time', response_time)
        log_error(e, "wall_threads_endpoint", {
            'thread_id': thread_id,
            'since': since,
            'limit': limit
        })
        raise

@cached_async(api_cache, ttl=30)
async def _get_peers_cached():
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∏—Ä–æ–≤"""
    if not sdominanta_agent:
        raise HTTPException(status_code=503, detail="P2P service not enabled or connected.")

    return list(known_peers)

@app.get("/api/v1/peers")
async def peers_list():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∏—Ä–æ–≤ –≤ P2P-—Å–µ—Ç–∏."""
    start_time = time.time()
    try:
        peers = await _get_peers_cached()
        response_time = time.time() - start_time
        performance_monitor.record_metric('peers_list_response_time', response_time)
        return JSONResponse(status_code=200, content=peers)
    except HTTPException:
        # –ù–µ –∫—ç—à–∏—Ä—É–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        raise
    except Exception as e:
        response_time = time.time() - start_time
        performance_monitor.record_metric('peers_list_error_time', response_time)
        log_error_with_context(e, "peers_list_endpoint")
        raise

@cached_async(api_cache, ttl=10)
async def _get_p2p_status_cached():
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è P2P —Å—Ç–∞—Ç—É—Å–∞"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è public_key
    agent_key = None
    if sdominanta_agent and hasattr(sdominanta_agent, 'public_key'):
        agent_key = str(sdominanta_agent.public_key)

    return {
        "enabled": CONFIG.get('p2p_enabled', False),
        "status": p2p_connection_status,
        "error": p2p_connection_error,
        "agent_public_key": agent_key,
        "known_peers_count": len(known_peers),
        "daemon_url": os.getenv("P2P_WS_URL", "ws://127.0.0.1:9090") if CONFIG.get('p2p_enabled', False) else None
    }

@app.get("/api/v1/p2p/status")
async def p2p_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å P2P –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    start_time = time.time()
    try:
        status = await _get_p2p_status_cached()
        response_time = time.time() - start_time
        performance_monitor.record_metric('p2p_status_response_time', response_time)
        return JSONResponse(status_code=200, content=status)
    except Exception as e:
        response_time = time.time() - start_time
        performance_monitor.record_metric('p2p_status_error_time', response_time)
        log_error_with_context(e, "p2p_status_endpoint")
        raise


@app.get("/api/v1/fs/list/{directory_path:path}")
async def list_files(directory_path: str):
    """
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏—Å—Ç–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    –ü—É—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (/app).
    –ü—Ä–∏–º–µ—Ä: /api/v1/fs/list/mcp/agents
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Path –≤–Ω—É—Ç—Ä–∏, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    from pathlib import Path

    # –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å:
    # - –µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω APP_BASE_PATH, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    # - –∏–Ω–∞—á–µ, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç "/app" (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    # - –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    env_base_path = os.getenv("APP_BASE_PATH")
    if env_base_path:
        base_path = Path(env_base_path).resolve()
    else:
        container_base = Path("/app")
        base_path = container_base.resolve() if container_base.exists() else Path.cwd().resolve()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –µ–≥–æ (—É–±–∏—Ä–∞–µ–º .. –∏ —Ç.–¥.)
    target_path = (base_path / directory_path).resolve()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –±–∞–∑–æ–≤–æ–≥–æ.
    if base_path not in target_path.parents and target_path != base_path:
        raise HTTPException(
            status_code=403,
            detail="Access denied: Path is outside the allowed project directory."
        )

    if not target_path.exists():
        raise HTTPException(status_code=404, detail="Path not found")

    if not target_path.is_dir():
        raise HTTPException(status_code=400, detail="Path is not a directory")

    try:
        contents = []
        for item in sorted(target_path.iterdir()):
            item_type = "directory" if item.is_dir() else "file"
            contents.append({"name": item.name, "type": item_type})
        
        result = {
            "directory": str(target_path.relative_to(base_path)),
            "contents": contents
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        if len(contents) <= 50:  # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            cache_key = f"fs_list_{directory_path}"
            api_cache.put(cache_key, result, ttl=60)  # –ö—ç—à –Ω–∞ 1 –º–∏–Ω—É—Ç—É

        return JSONResponse(status_code=200, content=result)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to read directory: {e}")

@app.get("/api/v1/performance/stats")
async def performance_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        cache_stats = {
            'api_cache': api_cache.stats(),
            'wall_cache': wall_cache.stats()
        }

        performance_stats = performance_monitor.get_stats()
        active_tasks = await task_manager.get_active_tasks()

        return JSONResponse(status_code=200, content={
            'cache_stats': cache_stats,
            'performance_stats': performance_stats,
            'active_tasks_count': len(active_tasks),
            'system_health': {
                'cache_hit_rate': cache_stats['api_cache'].get('hit_rate', 0),
                'average_response_time': performance_monitor.get_average('wall_threads_response_time', 10),
                'error_count': len([k for k in performance_stats.keys() if 'error' in k])
            }
        })
    except Exception as e:
        log_error_with_context(e, "performance_stats_endpoint")
        raise HTTPException(status_code=500, detail=f"Failed to get performance stats: {e}")

@app.post("/api/v1/cache/clear")
async def clear_cache():
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å–∏—Å—Ç–µ–º—ã"""
    try:
        api_cache.clear()
        wall_cache.clear()
        return JSONResponse(status_code=200, content={
            "message": "Cache cleared successfully",
            "cleared_caches": ["api_cache", "wall_cache"]
        })
    except Exception as e:
        log_error_with_context(e, "clear_cache_endpoint")
        raise HTTPException(status_code=500, detail=f"Failed to clear cache: {e}")


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è P2P-—Å–µ—Ç–∏."""
    await websocket.accept()
    print(f"WebSocket connection established: {websocket.client}")
    connected_websockets.add(websocket) # –î–æ–±–∞–≤–ª—è–µ–º WebSocket –≤ –Ω–∞–±–æ—Ä

    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏ P2P –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–µ–Ω—Ç—É
    try:
        while True:
            try:
                # –ñ–¥–µ–º –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫—É–Ω–¥
                data = await asyncio.wait_for(websocket.receive_text(), timeout=10.0)
                print(f"Received from WS client: {data}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    message = json.loads(data)
                    message_type = message.get("type")

                    if message_type == "ping":
                        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping
                        await websocket.send_json({
                            "type": "pong",
                            "timestamp": asyncio.get_event_loop().time()
                        })
                    elif message_type == "test":
                        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await websocket.send_json({
                            "type": "p2p_event",
                            "data": message.get("data", ""),
                            "received": True
                        })
                    else:
                        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                        await websocket.send_json({
                            "type": "error",
                            "message": f"Unknown message type: {message_type}"
                        })

                except json.JSONDecodeError:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON
                    await websocket.send_json({
                        "type": "error",
                        "message": "Invalid JSON format"
                    })
                except Exception as e:
                    print(f"Error processing message: {e}")
                    await websocket.send_json({
                        "type": "error",
                        "message": f"Processing error: {str(e)}"
                    })

            except asyncio.TimeoutError:
                # –¢–∞–π–º–∞—É—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                pass
            except Exception as e:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if isinstance(e, (ConnectionError, OSError)) or (hasattr(e, 'code') and e.code == 1000):
                    print(f"WebSocket connection closed normally: {e}")
                    break
                else:
                    print(f"Error receiving message: {e}")
                    break

    except Exception as e:
        print(f"WebSocket disconnected: {websocket.client} with error: {e}")
    finally:
        if websocket in connected_websockets:
            connected_websockets.remove(websocket)  # –£–¥–∞–ª—è–µ–º WebSocket –∏–∑ –Ω–∞–±–æ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
