#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
"""

import time
import asyncio
from fastapi.testclient import TestClient
from bridge.main import app

def test_api_performance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("=" * 50)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò API")
    print("=" * 50)

    client = TestClient(app)
    endpoints = [
        ("/api/v1/p2p/status", "P2P Status"),
        ("/api/v1/wall/threads?thread_id=general", "Wall Threads"),
        ("/api/v1/peers", "Peers"),
        ("/api/v1/fs/list/mcp", "FS List")
    ]

    for endpoint, name in endpoints:
        print(f"\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name} ===")

        # –¢–µ—Å—Ç 1: –û–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        times = []
        for i in range(10):
            start_time = time.time()
            response = client.get(endpoint)
            end_time = time.time()
            times.append(end_time - start_time)
            assert response.status_code in [200, 503]  # 503 –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è peers

        avg_time = sum(times) / len(times)
        min_time = min(times)
        max_time = max(times)

        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.4f} —Å–µ–∫")
        print(f"–ú–∏–Ω. –≤—Ä–µ–º—è: {min_time:.4f} —Å–µ–∫")
        print(f"–ú–∞–∫—Å. –≤—Ä–µ–º—è: {max_time:.4f} —Å–µ–∫")

        # –¢–µ—Å—Ç 2: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        print("\n–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
        start_time = time.time()
        for i in range(50):
            response = client.get(endpoint)
            assert response.status_code in [200, 503]
        end_time = time.time()
        total_time = end_time - start_time
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.4f} —Å–µ–∫")
        print(f"–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫: {50/total_time:.2f}")
async def test_websocket_performance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ WebSocket"""
    print("\n" + "=" * 50)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò WEBSOCKET")
    print("=" * 50)

    client = TestClient(app)

    # –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\n=== –¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===")
    with client.websocket_connect("/ws") as websocket:
        message_count = 100
        start_time = time.time()

        for i in range(message_count):
            websocket.send_text(f'{{"type": "test", "data": "msg_{i}"}}')
            response = websocket.receive_json()
            assert response["type"] == "p2p_event"

        end_time = time.time()
        total_time = end_time - start_time
        avg_time = total_time / message_count

        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.4f} —Å–µ–∫")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {avg_time:.4f} —Å–µ–∫")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫: {message_count/total_time:.2f}")

    # –¢–µ—Å—Ç 2: Ping-pong —Ç–µ—Å—Ç
    print("\n=== Ping-Pong —Ç–µ—Å—Ç ===")
    with client.websocket_connect("/ws") as websocket:
        ping_count = 50
        start_time = time.time()

        for i in range(ping_count):
            websocket.send_text('{"type": "ping"}')
            response = websocket.receive_json()
            assert response["type"] == "pong"

        end_time = time.time()
        total_time = end_time - start_time
        avg_time = total_time / ping_count

        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.4f} —Å–µ–∫")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ ping-pong: {avg_time:.4f} —Å–µ–∫")
        print(f"Ping-pong –≤ —Å–µ–∫: {ping_count/total_time:.2f}")
def test_memory_usage():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    print("\n" + "=" * 50)
    print("–ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –†–ï–°–£–†–°–û–í")
    print("=" * 50)

    import psutil
    import os

    process = psutil.Process(os.getpid())
    initial_memory = process.memory_info().rss / 1024 / 1024  # MB

    print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {initial_memory:.2f} MB")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π
    client = TestClient(app)

    for i in range(20):
        client.get("/api/v1/wall/threads?thread_id=general")
        client.get("/api/v1/p2p/status")
        client.get("/api/v1/fs/list/mcp")

    final_memory = process.memory_info().rss / 1024 / 1024  # MB
    memory_diff = final_memory - initial_memory

    print(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {final_memory:.2f} MB")
    print(f"–†–∞–∑–Ω–∏—Ü–∞: {memory_diff:.2f} MB")
    if memory_diff < 10:  # –ú–µ–Ω–µ–µ 10MB
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –Ω–æ—Ä–º–µ")
    else:
        print("‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏")

def main():
    print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 70)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    test_api_performance()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    asyncio.run(test_websocket_performance())

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    test_memory_usage()

    print("\n" + "=" * 70)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 70)

if __name__ == "__main__":
    main()
