#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

from fastapi.testclient import TestClient
from bridge.main import app
import json
import time

def test_complete_system():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    client = TestClient(app)

    print("=" * 60)
    print("–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–ô –°–ò–°–¢–ï–ú–´ SDOMINANTA.NET")
    print("=" * 60)

    results = {
        'api_endpoints': False,
        'websocket_functionality': False,
        'caching_system': False,
        'performance_monitoring': False,
        'error_handling': False,
        'logging_system': False
    }

    # 1. –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    try:
        # P2P Status
        response = client.get('/api/v1/p2p/status')
        assert response.status_code == 200
        data = response.json()
        assert 'status' in data
        assert 'enabled' in data

        # Wall Threads
        response = client.get('/api/v1/wall/threads?thread_id=general')
        assert response.status_code == 200
        data = response.json()
        assert isinstance(data, list)

        # Peers (–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 503 –µ—Å–ª–∏ P2P –æ—Ç–∫–ª—é—á–µ–Ω)
        response = client.get('/api/v1/peers')
        assert response.status_code in [200, 503]

        # FS List
        response = client.get('/api/v1/fs/list/mcp')
        assert response.status_code == 200

        results['api_endpoints'] = True
        print("‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {e}")

    # 2. –¢–µ—Å—Ç WebSocket —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket...")
    try:
        with client.websocket_connect("/ws") as websocket:
            # –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            test_messages = [
                {"type": "ping"},
                {"type": "test", "data": "websocket_test"},
                {"type": "unknown_type"}
            ]

            for msg in test_messages:
                websocket.send_text(json.dumps(msg))
                response = websocket.receive_json()
                assert 'type' in response

        results['websocket_functionality'] = True
        print("‚úÖ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

    # 3. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        response = client.post('/api/v1/cache/clear')
        assert response.status_code == 200

        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å—Å—è)
        start_time = time.time()
        response1 = client.get('/api/v1/p2p/status')
        time1 = time.time() - start_time

        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞)
        start_time = time.time()
        response2 = client.get('/api/v1/p2p/status')
        time2 = time.time() - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        response = client.get('/api/v1/performance/stats')
        assert response.status_code == 200
        stats = response.json()
        assert 'cache_stats' in stats

        results['caching_system'] = True
        print(f"‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∑–∞–ø—Ä–æ—Å 1: {time1:.3f}s, –∑–∞–ø—Ä–æ—Å 2: {time2:.3f}s)")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    # 4. –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for i in range(5):
            client.get('/api/v1/wall/threads?thread_id=general')
            client.get('/api/v1/p2p/status')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response = client.get('/api/v1/performance/stats')
        assert response.status_code == 200
        stats = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç—Ä–∏–∫
        assert 'performance_stats' in stats
        assert 'cache_stats' in stats
        assert 'system_health' in stats

        results['performance_monitoring'] = True
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    # 5. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    try:
        # –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON –≤ WebSocket
        with client.websocket_connect("/ws") as websocket:
            websocket.send_text("invalid json")
            response = websocket.receive_json()
            assert response['type'] == 'error'

        # –¢–µ—Å—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        with client.websocket_connect("/ws") as websocket:
            websocket.send_text(json.dumps({"type": "unknown"}))
            response = websocket.receive_json()
            assert response['type'] == 'error'

        results['error_handling'] = True
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")

    # 6. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
        client.get('/api/v1/p2p/status')
        with client.websocket_connect("/ws") as websocket:
            websocket.send_text(json.dumps({"type": "test", "data": "logging_test"}))
            websocket.receive_json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è (—Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
        import os
        log_files = ['logs/sdominanta.log', 'logs/api.log', 'logs/p2p.log']
        logs_exist = all(os.path.exists(log_file) for log_file in log_files)

        if logs_exist:
            results['logging_system'] = True
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ö†Ô∏è  –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result)

    for component, status in results.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print("15")

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

    if passed_tests == total_tests:
        print("üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í—Å–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

    print("=" * 60)

    return passed_tests == total_tests

if __name__ == "__main__":
    success = test_complete_system()
    exit(0 if success else 1)
